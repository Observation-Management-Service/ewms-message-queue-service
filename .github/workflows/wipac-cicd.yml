name: wipac ci/cd


on: [ push ]


env:
  CI_DOCKER_IMAGE_W_TAG: mqs/test:local
  #
  HERE_URL: mqs.testing-url.aq
  MONGODB_HOST: localhost
  MONGODB_PORT: 27017
  REST_HOST: localhost  # the server should connect to 0.0.0.0
  REST_PORT: 8080
  BROKER_URL: test-broker.url.aq
  BROKER_QUEUE_USERNAME: theuser
  BROKER_TYPE: rabbitmq
  BROKER_QUEUE_AUTH_PRIVATE_KEY_FILE: /test-priv-keys/broker-queue-private.key  # root dir
  BROKER_QUEUE_AUTH_PUBLIC_KEY_FILE: /test-pub-keys/broker-queue-public.key  # root dir
  #
  REST_OPENAPI_SPEC_FPATH: "schema/rest/openapi_spec.json"
  DB_JSONSCHEMA_DIR: "schema/db"


jobs:

  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.5


  #############################################################################
  # LINTERS
  #############################################################################

  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: WIPACrepo/wipac-dev-flake8-action@v1.2

  mypy:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-mypy-action@v2.0


  #############################################################################
  # PACKAGING
  #############################################################################

  writable-branch-detect:
    runs-on: ubuntu-latest
    outputs:
      OKAY: ${{ steps.detect.outputs.OKAY }}
    steps:
      - name: is this a bot-writable branch?
        id: detect
        # dependabot can't access normal secrets
        #   & don't run non-branch triggers (like tags)
        run: |
          set -euo pipefail
          if [[ \
              ${{github.actor}} != 'dependabot[bot]' && \
              ${{github.ref_type}} == 'branch' \
          ]]; then
            echo "OKAY=true" >> "$GITHUB_OUTPUT"
            echo "yes, this branch is compatible"
          else
            echo "OKAY=false" >> "$GITHUB_OUTPUT"
            echo "no, this branch is incompatible"
          fi

  py-setup:
    needs: [ writable-branch-detect ]
    runs-on: ubuntu-latest
    steps:
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: WIPACrepo/wipac-dev-py-setup-action@v3.1
        with:
          base-keywords: WIPAC IceCube "Observation Management Service" "Event Workflow Management Service"

  py-dependencies:
    needs: [ writable-branch-detect ]
    runs-on: ubuntu-latest
    steps:
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: docker/setup-buildx-action@v2
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          tags: mqs:py-dep-this
          load: true
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: WIPACrepo/wipac-dev-py-dependencies-action@v2.1


  #############################################################################
  # FORMATTER
  #############################################################################

  code-format:
    runs-on: ubuntu-latest
    steps:
      - if: github.actor != 'dependabot[bot]'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # fyi, dependabot can't access normal secrets
      - name: git config
        if: github.actor != 'dependabot[bot]'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: ruff
        if: github.actor != 'dependabot[bot]'
        run: |
          # use literal collection syntax, see https://docs.astral.sh/ruff/rules/unnecessary-collection-call/
          pip install ruff
          ruff check --select C408 --fix . --unsafe-fixes
      - name: isort
        if: github.actor != 'dependabot[bot]'
        run: |
          pip install isort
          isort . --profile black -v --float-to-top --reverse-relative
      - name: push changes
        if: github.actor != 'dependabot[bot]'
        run: |
          # check git status
          git fetch
          if [[ $(git status -sb | grep behind) ]]; then
            echo "this commit is not the most recent on this branch -- changes won't be pushed"
            exit 0
          else
            # push
            git add . || true
            git commit -m "<bot> auto code format file(s)" || true
            git push || true
          fi


  ############################################################################
  # AUTO-GENERATION
  #############################################################################

  schema-modifications:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # fyi, dependabot can't access normal secrets
      - uses: WIPACrepo/wipac-dev-json-schema-action@v2.0
        with:
          rest_openapi_paths_dir: "schema-precompiled/paths"
          rest_openapi_base_fpath: "schema-precompiled/openapi_prebuild.json"
          rest_openapi_dest_fpath: "mqs/${{ env.REST_OPENAPI_SPEC_FPATH }}"
          db_jsonschema_dir: "mqs/${{ env.DB_JSONSCHEMA_DIR }}"
          dunder_paths_no_vprefix: "mqbroker-issuer__.well-known__jwks.json"
          version: 1

  api-documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # fyi, dependabot can't access normal secrets
      - uses: actions/setup-python@v4
      - name: Is this the most recent commit? It won't be if the action was reran
        run: |
          git fetch &> /dev/null
          if [[ $(git status -sb | grep behind) ]]; then
            echo "this commit is not the most recent on this branch -- rest of action will be skipped"
            echo "IS_GIT_BEHIND=true" >> $GITHUB_ENV
          else
            echo "IS_GIT_BEHIND=false" >> $GITHUB_ENV
          fi
      - name: Git config
        if: env.IS_GIT_BEHIND != 'true'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: generate docs (README)
        if: env.IS_GIT_BEHIND != 'true'
        run: |
          outdir=Docs
          git rm -r $outdir || true
          # generate
          docker run --rm \
              -v $PWD:/local \
              openapitools/openapi-generator-cli generate \
              --skip-validate-spec \
              -i /local/mqs/$REST_OPENAPI_SPEC_FPATH \
              -g markdown \
              -o /local/$outdir
          set -ex
          sudo chmod -R +777 $outdir  # needed since the 'rm' above wiped previous ownership & now container owns it all
          # tweak auto-generated contents -- miscellaneous
          # remove "no auth" mentions
          sed -i "/All endpoints do not require authorization./d" $outdir/README.md
          sed -i "\|All URIs are relative to \*http://localhost\*|d" $outdir/README.md
          #       ^^ alternate delimiter: https://stackoverflow.com/a/1797967
          find $outdir -type f -exec sed -i '/No authorization required/d' {} +
      - name: git add, commit, push
        if: env.IS_GIT_BEHIND != 'true'
        run: |
          git add . || true
          git commit -m "<ci> modify rest documentation" || true
          git push || true


  ############################################################################
  # TESTS
  #############################################################################

  test-build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=min
          file: Dockerfile
          tags: ${{ env.CI_DOCKER_IMAGE_W_TAG }}

  integration-tests:
    needs: [ py-versions, schema-modifications ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    services:
      mongo:
        image: bitnami/mongodb:4
        ports:
          - 27017:27017
        env:
          MONGODB_REPLICA_SET_MODE: primary
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py3 }}
      - uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          # cache-to: type=gha,mode=min
          file: Dockerfile
          tags: ${{ env.CI_DOCKER_IMAGE_W_TAG }}
          load: true
      - run: |
          pip install .[tests]
      - name: make mqbroker key file directories
        run: |
          set -ex
          sudo mkdir -p $(dirname ${{ env.BROKER_QUEUE_AUTH_PRIVATE_KEY_FILE }})
          sudo chmod -R 777 $(dirname ${{ env.BROKER_QUEUE_AUTH_PRIVATE_KEY_FILE }})
          sudo mkdir -p $(dirname ${{ env.BROKER_QUEUE_AUTH_PUBLIC_KEY_FILE }})
          sudo chmod -R 777 $(dirname ${{ env.BROKER_QUEUE_AUTH_PUBLIC_KEY_FILE }})
      - name: test (run rest server in background)
        run: |
          set -ex
          # this needs to be in the same step b/c shell exits when step is done
          docker run --network='host' --rm --name rest \
            --env HERE_URL="${{ env.HERE_URL }}" \
            --env MONGODB_HOST="${{ env.MONGODB_HOST }}" \
            --env MONGODB_PORT="${{ env.MONGODB_PORT }}" \
            --env REST_HOST="${{ env.REST_HOST }}" \
            --env REST_PORT="${{ env.REST_PORT }}" \
            $(env | grep '^BROKER_' | awk '$0="--env "$0') \
            --env REST_OPENAPI_SPEC_FPATH="${{ env.REST_OPENAPI_SPEC_FPATH }}" \
            --env DB_JSONSCHEMA_DIR="${{ env.DB_JSONSCHEMA_DIR }}" \
            --env CI="true" \
            --mount type=bind,source=$(dirname ${{ env.BROKER_QUEUE_AUTH_PRIVATE_KEY_FILE }}),target=$(dirname ${{ env.BROKER_QUEUE_AUTH_PRIVATE_KEY_FILE }}) \
            --mount type=bind,source=$(dirname ${{ env.BROKER_QUEUE_AUTH_PUBLIC_KEY_FILE }}),target=$(dirname ${{ env.BROKER_QUEUE_AUTH_PUBLIC_KEY_FILE }}) \
            ${{ env.CI_DOCKER_IMAGE_W_TAG }} &> ./rest.out &
          sleep 1  # hopefully not needed, but jic 

          pytest -vvv --exitfirst tests/integration/
      #
      - if: always()
        run: |
          docker logs rest || cat ./rest.out


  unit-tests:
    needs: [ py-versions, schema-modifications ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py3 }}
      - run: |
          pip install .[tests]
      - name: test
        run: |
          pytest -vvv tests/unit/


  #############################################################################
  # GITHUB RELEASE
  #############################################################################

  release:
    # only run on main/master/default
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    needs: [
      flake8,
      mypy,
      py-setup,
      py-versions,
      py-dependencies,
      code-format,
      schema-modifications,
      api-documentation,
      test-build-docker,
      integration-tests,
      unit-tests
    ]
    runs-on: ubuntu-latest
    concurrency: release
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # fyi, dependabot can't access normal secrets
      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@v7.34.6
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # fyi, dependabot can't access normal secrets
          # repository_username: __token__
          # repository_password: ${{ secrets.PYPI_TOKEN }}
